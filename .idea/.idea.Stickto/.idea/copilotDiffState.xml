<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/HOW_TO_USE_GOOGLE_LOGIN.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HOW_TO_USE_GOOGLE_LOGIN.md" />
              <option name="updatedContent" value="# How to Use the Google Login Endpoint&#10;&#10;##  Quick Start - Two Options&#10;&#10;### Option 1: Easy Testing (Recommended for Development) ⭐&#10;&#10;Use the **DEV endpoint** that doesn't require a real Google token:&#10;&#10;**Endpoint**: `POST /api/Auth/dev-google-login`&#10;&#10;**Request Body**:&#10;```json&#10;{&#10;  &quot;email&quot;: &quot;test@example.com&quot;&#10;}&#10;```&#10;&#10;**Example with cURL**:&#10;```bash&#10;curl -X 'POST' \&#10;  'http://localhost:5281/api/Auth/dev-google-login' \&#10;  -H 'accept: */*' \&#10;  -H 'Content-Type: application/json' \&#10;  -d '{&#10;  &quot;email&quot;: &quot;your-email@example.com&quot;&#10;}'&#10;```&#10;&#10;**Response**:&#10;```json&#10;{&#10;  &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;  &quot;message&quot;: &quot;[DEV MODE] Login successful&quot;,&#10;  &quot;userInfo&quot;: {&#10;    &quot;id&quot;: &quot;42dcdadf-40da-4655-b231-ce2fdaba1d34&quot;,&#10;    &quot;firstName&quot;: &quot;your-email&quot;,&#10;    &quot;lastName&quot;: &quot;TestUser&quot;,&#10;    &quot;email&quot;: &quot;your-email@example.com&quot;,&#10;    &quot;role&quot;: &quot;User&quot;&#10;  }&#10;}&#10;```&#10;&#10;**What it does**:&#10;- ✅ Creates a user if they don't exist (with default address)&#10;- ✅ Returns a JWT token immediately&#10;- ✅ No Google OAuth setup needed&#10;- ✅ Only available in DEBUG mode (safe for development)&#10;&#10;---&#10;&#10;### Option 2: Real Google OAuth (Production-Ready)&#10;&#10;Use the **production endpoint** with a real Google ID token:&#10;&#10;**Endpoint**: `POST /api/Auth/google-login`&#10;&#10;**Request Body**:&#10;```json&#10;{&#10;  &quot;idToken&quot;: &quot;YOUR_GOOGLE_ID_TOKEN_HERE&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;##  Step-by-Step: Getting a Real Google ID Token&#10;&#10;### Prerequisites&#10;1. You need a **Google Cloud Project** with OAuth 2.0 credentials&#10;2. Go to [Google Cloud Console](https://console.cloud.google.com/)&#10;3. Create OAuth 2.0 Client ID (if you don't have one)&#10;&#10;### Method 1: Using Google OAuth Playground (Easiest)&#10;&#10;1. **Go to**: https://developers.google.com/oauthplayground&#10;&#10;2. **Click the gear icon** (⚙️) in the top-right corner&#10;&#10;3. **Check**: &quot;Use your own OAuth credentials&quot;&#10;&#10;4. **Enter your credentials**:&#10;   - OAuth Client ID: (from Google Cloud Console)&#10;   - OAuth Client Secret: (from Google Cloud Console)&#10;&#10;5. **Select scopes** (Step 1):&#10;   - Find &quot;Google OAuth2 API v2&quot;&#10;   - Select: `https://www.googleapis.com/auth/userinfo.email`&#10;   - Select: `https://www.googleapis.com/auth/userinfo.profile`&#10;&#10;6. **Click**: &quot;Authorize APIs&quot;&#10;   - You'll be redirected to sign in with Google&#10;   - Grant the requested permissions&#10;&#10;7. **Click**: &quot;Exchange authorization code for tokens&quot; (Step 2)&#10;&#10;8. **Copy the `id_token`** (not the `access_token`!)&#10;   - It's a long string starting with `eyJ...`&#10;&#10;9. **Use it in Swagger**:&#10;   ```json&#10;   {&#10;     &quot;idToken&quot;: &quot;eyJhbGciOiJSUzI1NiIsImtpZCI6...&quot;&#10;   }&#10;   ```&#10;&#10;10. **Important**: ID tokens expire in ~1 hour, so get a fresh one if it fails&#10;&#10;---&#10;&#10;### Method 2: Using Postman&#10;&#10;1. **Create a new request** in Postman&#10;2. **Go to Authorization tab**&#10;3. **Select**: OAuth 2.0&#10;4. **Configure**:&#10;   - Grant Type: Authorization Code&#10;   - Auth URL: `https://accounts.google.com/o/oauth2/v2/auth`&#10;   - Access Token URL: `https://oauth2.googleapis.com/token`&#10;   - Client ID: (your Google Client ID)&#10;   - Client Secret: (your Google Client Secret)&#10;   - Scope: `openid email profile`&#10;5. **Click**: &quot;Get New Access Token&quot;&#10;6. **Copy the `id_token`** from the response&#10;&#10;---&#10;&#10;### Method 3: From a Frontend Application&#10;&#10;If you have a React/Angular/Vue app:&#10;&#10;```javascript&#10;// Example with Google Sign-In JavaScript library&#10;&lt;script src=&quot;https://accounts.google.com/gsi/client&quot; async defer&gt;&lt;/script&gt;&#10;&#10;&lt;div id=&quot;g_id_onload&quot;&#10;     data-client_id=&quot;YOUR_GOOGLE_CLIENT_ID&quot;&#10;     data-callback=&quot;handleCredentialResponse&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;function handleCredentialResponse(response) {&#10;  const idToken = response.credential; // This is what you send to the backend&#10;  &#10;  // Send to your API&#10;  fetch('http://localhost:5281/api/Auth/google-login', {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ idToken: idToken })&#10;  })&#10;  .then(res =&gt; res.json())&#10;  .then(data =&gt; {&#10;    console.log('JWT Token:', data.token);&#10;    // Store the token and use it for authenticated requests&#10;    localStorage.setItem('token', data.token);&#10;  });&#10;}&#10;&lt;/script&gt;&#10;```&#10;&#10;---&#10;&#10;##  Testing in Swagger&#10;&#10;### 1. Open Swagger UI&#10;Navigate to: `http://localhost:5281/swagger`&#10;&#10;### 2. Find the endpoint&#10;Look for: `POST /api/Auth/google-login`&#10;&#10;### 3. Click &quot;Try it out&quot;&#10;&#10;### 4. Enter the request body&#10;For **DEV mode** (using `dev-google-login`):&#10;```json&#10;{&#10;  &quot;email&quot;: &quot;test@gmail.com&quot;&#10;}&#10;```&#10;&#10;For **PRODUCTION** (using `google-login`):&#10;```json&#10;{&#10;  &quot;idToken&quot;: &quot;eyJhbGciOiJSUzI1NiIsImtpZCI6IjdhYmM...&quot;&#10;}&#10;```&#10;&#10;### 5. Click &quot;Execute&quot;&#10;&#10;### 6. Check the response&#10;**Success (200)**:&#10;```json&#10;{&#10;  &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,&#10;  &quot;message&quot;: &quot;Google login successful.&quot;,&#10;  &quot;userInfo&quot;: {&#10;    &quot;userId&quot;: &quot;guid-here&quot;,&#10;    &quot;firstName&quot;: &quot;John&quot;,&#10;    &quot;lastName&quot;: &quot;Doe&quot;,&#10;    &quot;email&quot;: &quot;john.doe@gmail.com&quot;,&#10;    &quot;role&quot;: &quot;User&quot;&#10;  }&#10;}&#10;```&#10;&#10;**Error (401 - Unauthorized)**:&#10;```json&#10;{&#10;  &quot;message&quot;: &quot;Invalid Google token.&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;##  Using the JWT Token&#10;&#10;After successful login, use the returned token for authenticated requests:&#10;&#10;### Example: Get Current User Info&#10;&#10;**cURL**:&#10;```bash&#10;curl -X 'GET' \&#10;  'http://localhost:5281/api/Auth/me' \&#10;  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'&#10;```&#10;&#10;**In Swagger**:&#10;1. Click the  &quot;Authorize&quot; button at the top&#10;2. Enter: `Bearer YOUR_TOKEN_HERE`&#10;3. Click &quot;Authorize&quot;&#10;4. Now all authenticated endpoints will work&#10;&#10;---&#10;&#10;##  What Happens Behind the Scenes&#10;&#10;### For DEV endpoint (`dev-google-login`):&#10;1. ✅ Checks if user exists by email&#10;2. ✅ If not, creates new user with:&#10;   - Password: `null` (OAuth user)&#10;   - AuthProvider: `&quot;Google&quot;`&#10;   - Default address created&#10;   - Default role: &quot;User&quot;&#10;3. ✅ Generates JWT token&#10;4. ✅ Returns token + user info&#10;&#10;### For PRODUCTION endpoint (`google-login`):&#10;1. ✅ Validates Google ID token with Google's servers&#10;2. ✅ Extracts user info (email, name) from token&#10;3. ✅ Checks if user exists by email&#10;4. ✅ If not, creates new user (same as DEV)&#10;5. ✅ Generates JWT token&#10;6. ✅ Returns token + user info&#10;&#10;---&#10;&#10;##  Database Changes&#10;&#10;The user is stored with:&#10;```sql&#10;INSERT INTO user_service.&quot;Users&quot; (&#10;  Id, Email, FirstName, LastName, &#10;  Password,          -- NULL for OAuth users ✅&#10;  AuthProvider,      -- &quot;Google&quot;&#10;  ExternalUserId,    -- Google's user ID&#10;  RoleId&#10;)&#10;```&#10;&#10;---&#10;&#10;## ⚠️ Common Issues &amp; Solutions&#10;&#10;### Issue 1: &quot;Invalid Google token&quot;&#10;**Solution**: &#10;- Get a fresh ID token (they expire in ~1 hour)&#10;- Make sure you're using `id_token`, not `access_token`&#10;&#10;### Issue 2: &quot;Default user role not found&quot;&#10;**Solution**: &#10;- Seed your database with default roles&#10;- Run migrations: `dotnet ef database update`&#10;&#10;### Issue 3: &quot;An error occurred while saving&quot;&#10;**Solution**: &#10;- ✅ Already fixed! The migration made Password nullable&#10;- If still seeing this, ensure migration was applied:&#10;  ```bash&#10;  dotnet ef database update&#10;  ```&#10;&#10;### Issue 4: DEV endpoint not showing in Swagger&#10;**Solution**: &#10;- Only available in DEBUG mode&#10;- Check that you're running in Development environment&#10;&#10;---&#10;&#10;##  Complete Flow Example&#10;&#10;### 1. Development Testing (No Frontend)&#10;```bash&#10;# Step 1: Test with dev endpoint&#10;curl -X 'POST' 'http://localhost:5281/api/Auth/dev-google-login' \&#10;  -H 'Content-Type: application/json' \&#10;  -d '{&quot;email&quot;: &quot;test@example.com&quot;}'&#10;&#10;# Step 2: Copy the token from response&#10;TOKEN=&quot;eyJhbGciOiJIUzI1NiIs...&quot;&#10;&#10;# Step 3: Use token to access protected endpoint&#10;curl -X 'GET' 'http://localhost:5281/api/Auth/me' \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot;&#10;```&#10;&#10;### 2. Production Flow (With Frontend)&#10;```&#10;User clicks &quot;Sign in with Google&quot;&#10;  ↓&#10;Frontend gets Google ID token&#10;  ↓&#10;Frontend sends token to: POST /api/Auth/google-login&#10;  ↓&#10;Backend validates token with Google&#10;  ↓&#10;Backend creates/finds user in database&#10;  ↓&#10;Backend returns JWT token&#10;  ↓&#10;Frontend stores JWT token&#10;  ↓&#10;Frontend uses JWT for all API requests&#10;```&#10;&#10;---&#10;&#10;##  Summary&#10;&#10;**For Testing (No Frontend)**:&#10;- Use: `POST /api/Auth/dev-google-login`&#10;- Body: `{ &quot;email&quot;: &quot;test@example.com&quot; }`&#10;- ✅ Works immediately, no setup needed&#10;&#10;**For Production (With Frontend)**:&#10;- Use: `POST /api/Auth/google-login`&#10;- Body: `{ &quot;idToken&quot;: &quot;...&quot; }`&#10;- Need: Google OAuth setup + ID token&#10;&#10;**Both endpoints**:&#10;- ✅ Create user if doesn't exist&#10;- ✅ Handle OAuth (null password) correctly&#10;- ✅ Return JWT token for authenticated requests&#10;- ✅ Work with Swagger for testing&#10;&#10;---&#10;&#10;##  You're Ready!&#10;&#10;Try it now in Swagger:&#10;1. Navigate to `http://localhost:5281/swagger`&#10;2. Find `POST /api/Auth/dev-google-login`&#10;3. Click &quot;Try it out&quot;&#10;4. Enter: `{ &quot;email&quot;: &quot;your-email@gmail.com&quot; }`&#10;5. Click &quot;Execute&quot;&#10;6. Copy the token and use it! &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>